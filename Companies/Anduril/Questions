Tell me about working with others in the organization

    Our team builds workflows within a workflow orchestration system called cadence.  This system is maintained by one of our dependent teams.  When we started this project I met with the staff engineer on their team to understand it's capabilities and design rationales and to see how to best integrate our systems with one another.

    I did this not only to accelerate technical adoption but to cultivate a relationship between our two teams.  Since then I've engaged with their team whenever we're building out new feature spaces as a technical checkpoint.

    Over the course of a few engagements we've since been discussing a version 2.0 of their platform offerings based upon a more generic system of primitives that you can compose together.  This was in an attempt to increase developer velocity and lower the burden of adoption for other teams.  So not only has this relationship helped us shape our technical direction, I've contributed to their technical direction as well.

    I also contributed directly to this initiative with a "home away model" as we were the primary drivers of this work.

Adapt to significant challenge at work

    We were recently working on a number of services over a multi-year period.  We were required to pivot towards a new product direction due to C suite level decision making.  Our team needed to build-out a new product space and work within our companies technical stack in an entirely new area.

    I took it upon myself to lead the technical direction of this new initiative, familiarized myself with all new stakeholders and dependent teams, and set up regular synces with our cross functional partners to ensure open communication and set checkpoints for rollout.

    After this transition period we've really hit the ground running recently, we're delivering more and more features and driving massive revenue compared to a few quarters ago where it was near zero.

Going above and beyond job responsibilities

    We created a novel on-chain execution layer bridging the gap between the exchange and the broader crypto ecosystem.

    During the early stage of our product we discovered that one user's was able to exploit our platform.  We discovered this at roughly 8am.  Thankfully we developed robust monitoring and alerting towards anomalous activities. I immediately kill switched our service and declared an incident.  We spent the next 10-12 hours triaging the issue, replicating the behavior, and re-architecting some of the critical fund pathways.  We were able to slowly ramp our service over the next few days.

    I created a document outlining what happened and how we were planning to hedge against his behavior in the future.  I then took the lead to present to the directors of our organization and the technical staff at the company.

    It would've been easy for our team to deflect blame because we've alreayd gone through design and security review but ultimately it is our responsibility as owners of the product space and it's a good lesson to learn early -- to always keep an eye on security when dealing with financial transactions.

Disagreements with management

    At Coinbase, we were developing a retail wallet application that allowed people to interact with smart contracts, and defi application via a browser embedded in the mobile experience.  Leadership decided to deprecate this product due to too much overlap with existing product overings and increased complexity within the mobile experience.

    While I didn't disagree with this from a fundamental business perspective, it would've required significant technical resources to deprecate and migrate user funds outside of their wallet.

    Instead of a complete deprecation I advocated for a duel track, to more slowly move away from this browser experience and abstracting a lot of functionality behind a first party interface.  This is the direction we've been pursuing ever since.  User's no longer have to worry about the underlying protocol or what chain they're on.  This unlocked a lot of latent potential for user adoption and it's the strategy we've been pursuing ever since.

New technologies to complete a project

    At Coinbase, we were required to migrate all of our services to Kubernetes.  We were one of the first teams at the company to do this migration and I was the only engineer on the team with experience with any experience.  I took it upon myself to dive deep into the kubernetes and take ownership of this domain for my team.

    I not only needed to do this migration myself, I needed to up-level my team to learn everything from the primatives of kubernetes, to how things are composed together, to the "why" of the migration, how the code actually fit's in the repository, everything.

    To do this, I set up something called the backend round table.  This is a recurrent open topic forum for sharing new  technologies our team is adopting. I presented for about an hour about kubernetes and what it  means for our team.  Since then there's been about 20 round table discussions ranging from Asynchronous Technologies at Coinbase, to Blockchain / smart contract development.

    After the success of this meeting, I've advocated to other tech leads to adopt this meeting format as well and I know of at least 5 who have done so.  I really like this format and plan to bring something like this along with me to whichever company i'm at.  It's really helped up-level team members and increase developer velocity as we adopt new technologies.

Describe a situation where you had to manage conflicting priorities. How did you determine what was most important, and what was the result?

    At Coinbase, we commonly leverage the "home away" model of development when one team requires large-scale changes within a dependency.  I was dedicating some of my time with another team trying to build out an MVP for version 2.0 of the workflow orchestration sytem.  However, at the same time our team needed to support a large number of different payment methods and more and more use cases.

    While the MVP work is important long term, it didn't move the needle in terms of our immediate quarterly goals, or drive direct revenue.  I was able to discuss my split priorities with engineers on the other team and decelerate my contributions towards this MVP and at the same time, allowed engineers on my team to take direct ownership of payment methods and use cases.

    This load balancing across my team allowed other engineers on my team to step up onto the plate and provided us a clear path forward to accomplish our immediate and long term goals.

Tehnical challenge? problem?  How did I overcome it?  What was the approach?  The results?

    During my time at Maxar, we had a major problem.  Our analysts were required to wear a software engineering hat to develop Python Notebooks for analysis, work with s3 to order and store imagery, and interface with a wide range of containerized models, each with their own particular interfaces and outputs.  They then needed to deploy these notebooks into the cloud for continuous delivery and hope theres new data.

    We needed to develop a system that abstracted away a significant amount of complexity and allowed them to work on analysis rather than software engineering.

    I developed a system to process large volumes of multi-model satellite imagery when that imagery intersected with areas of interest associated with machine learning models.  The analysts would delineate these AOIs, and associate them with models,  we would then handle incoming imagery metadata coming from upstream data provides, perform intersection, and queue up tasks for imagery ordering and processing.  The results would then be stored in s3, exposed via AWS Glue and Apache Spark, creating a spatio-temporal index on top of the results of analysis.

    The majority of the technical challenge came from the sheer volume of data.  We created a sharded in-memory datastore to perform the intersections and provide scalability.

    This significantly decreased overhead and we were able to spin out an entire product based upon this system.

Advocate for change or technology within a team?

    At Coinbase, our team was initially building a lot of asynchronous consumers as side-processes or sub-services within our application layer.  This lead to us scaling the total number of consumers based upon a primarily API driven application and didn't compartmentalize responsibilities across services or provide least-privileged access to dependencies.

    I created a technical document outlining the problem and proposed solution to decouple these services into stand-alone applications.  This change allowed us to seperate responsibilities of our services and provided a platform for accelerated development.

    In discussions surrounded this technical document, it became apparently that of the new engineers on my team weren't family with asynchronous processing technologies at all.  I took this as an opportunity to up level the engineers on my team and discussed these technologies and there individual use cases during the backend round table.