What are you most proud of?

What is some feedback you have received from peers / managers that made you a better engineer?

    Delegation

    Over-communication is infinitely better than under communication.

What is some positive feedback that i've received from peers / managers?

    Mentorship.
        Yeah one of my peers has thanked me for helping then understand some of the complexities of our system
        they were taking over one of the projects I was working on and I put together some documentation and walked them
        through the code-flow and how everything's put together.

Can you discuss scaling challenges you've had with your applications?  How did you overcome them?

    So a few years ago, Coinbase released a SuperBowl ad that brought the hug of death on the website taking it down
    for a few hours.  It brought a ton of eyes on the infrastructure and the services running to power the site.

    With that in mind, we have pretty stringent load testing requirements at Coinbase.  We have company wide load tests
    bi weekly and our team needs to carry out 10x average load tests every week.  I delegated the responsibilty of
    setting up the weekly loads tests to a more junior engineer on the team.  But I sit-in on those load tests pretty
    frequently.

    When we initially began load testing our new service we quickly reached CPU saturation before we were able to scale
    out our service so our average latencies were over our SLOs during the load test before we were able to scale out.

    This indicated that we weren't able to scale our resources sufficiently under load. We looking at the minimum CPU
    utilization threshold to scale out our resources and decreased that threshold.  We also increased the minimum number
    of pods in our cluster to better absorb incoming traffic.  During the next load test after these changes were made,
    we were successful.


Describe your experience with monitoring and maintaining the reliability of large-scale production systems.

    There can be any number of things that go wrong when maintaining the reliability of production systems.  We have
    a large number of dependencies during service alerts we can quickly diagnose where in our system something may be going
    wrong.  We try to decrease the number of variables as quickly as possible.  We've established a comprehensive dashboard
    to do just that detailing the latency and error rates of each of our dependencies, that way, if our latency is high,
    we can diagnose at a glance if it's happening upstream or within our service.

Can you provide an example of a challenging engineering problem you encountered and how you overcame it?

What is your approach to managing deadlines and working under pressure within an engineering environment?

Describe a situation where you had to collaborate with cross-functional teams to achieve a common goal

    We have pretty stringent cross functional requirements for our service at Coinbase.  Before we're able to move customer's
    and Coinbase funds we need to interact with the Finance Team, the Tax Team, and the Security Team.  We needed to transform
    our technical design into something that the Finance team can understand, take their feedback, and transform our design
    to come into compliance for tax and reporting purposes.

    We built our transfer workflow using a number of composable primitives so it was relatively easy to make these changes.

Explain a time when you had to adapt your communication style to convey complex technical concepts to non-technical stakeholders.

    We work directly with non or less technical stakeholders frequently.  Product managers may need some technical detail as to
    the current state of the product and any issues that arise.  However, they don't really care about the underlying technical
    detail.  So more broad strokes can be painted when discussing the project.  When meeting with other engineers they may
    need that additional detail to have an understanding of the underlying problem or current state of affairs.

How do you prioritize tasks and manage competing priorities while ensuring deadlines are met?

How do you assess the quality of code, and what practices do you follow to ensure high-quality software delivery?

    Extensibility. Comprehensive testing. Documentation.

Describe a time when you faced significant obstacles on a project and how you adapted to overcome them.

    Yeah, we discovered an exploit fairly early on in the life of our service.  We have fairly robust anomaly detection
    mechanisms in place and we were monitoring for users' sending tons of transactions and that's exactly what happened.
    We immediately declared an incident, kill-switched the application, and started work to triage how this was taking
    place.

    We had a few different teams across multiple organizations looking at our workflows and nobody thought this was possible.
    However, our team is working on this every day and we're the one's who're solely responsible.  So, we took this as a
    learning opportunity to take security seriously and any changes we're making going forward will be made with this lens.

    Since that time, all of our new workflows and collaboration takes this attacker perspective into consideration.

How have you demonstrated leadership within an engineering team, and how do you foster collaboration and innovation?

